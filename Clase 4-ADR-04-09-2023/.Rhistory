df = pd.DataFrame(columns=['Correo'])
View(extraer_correos)
correos_a = extraer_correos(texto_a)
df = df.append(pd.DataFrame({'Correo': correos_a}), ignore_index=True)
correos_b = extraer_correos(texto_b)
df = df.append(pd.DataFrame({'Correo': correos_b}), ignore_index=True)
df
df.head()
df['texto original'] = ""
df.loc[0, 'texto original'] = texto_a
df.loc[1, 'texto original'] = texto_b
df
import re
def extraer_correos(texto):
# Expresión regular para buscar direcciones de correo electrónico
patron = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
# Buscar todas las coincidencias en el texto
correos = re.findall(patron, texto)
# Agregar el prefijo "mailto:" a cada dirección de correo
correos = ['mailto:' + correo for correo in correos]
return correos
# Ejemplos de texto
texto_a = "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b = "Envíame el trabajo a sofia@dir.com"
# Crear una lista para almacenar los contactos
contactos = []
# Extraer y almacenar los correos del Texto A
correos_a = extraer_correos(texto_a)
contactos.extend(correos_a)
# Extraer y almacenar los correos del Texto B
correos_b = extraer_correos(texto_b)
contactos.extend(correos_b)
# Crear una lista de diccionarios para almacenar los datos de cada contacto
contactos_data = [{'Correo': correo, 'texto original': ''} for correo in contactos]
# Asignar los textos 'a' y 'b' a la clave "texto original" en cada diccionario
contactos_data[0]['texto original'] = texto_a
contactos_data[1]['texto original'] = texto_b
# Imprimir los contactos en un formato tabular
for contacto in contactos_data:
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
quit
# Imprimir los contactos en un formato tabular
for contacto in contactos_data:
reticulate::repl_python()
for contacto in contactos_data:
import re
import pandas as pd
def extraer_correos(texto):
# Expresión regular para buscar direcciones de correo electrónico
patron = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
# Buscar todas las coincidencias en el texto
correos = re.findall(patron, texto)
# Agregar el prefijo "mailto:" a cada dirección de correo
correos = ['mailto:' + correo for correo in correos]
return correos
# Ejemplos de texto
texto_a = "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b = "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a = extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b = extraer_correos(texto_b)
# Crear un data frame para almacenar los contactos
contactos_data = pd.DataFrame(columns=['Correo', 'Texto original'])
# Asignar los correos del Texto A al texto original A
contactos_data = contactos_data.append(pd.DataFrame({'Correo': correos_a, 'Texto original': texto_a}), ignore_index=True)
# Asignar el correo del Texto B al texto original B
contactos_data = contactos_data.append(pd.DataFrame({'Correo': [correos_b[0]], 'Texto original': [texto_b]}), ignore_index=True)
# Imprimir los contactos en un formato tabular
contactos_data
import re
def extraer_correos(texto):
# Expresión regular para buscar direcciones de correo electrónico
patron = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
# Buscar todas las coincidencias en el texto
correos = re.findall(patron, texto)
# Agregar el prefijo "mailto:" a cada dirección de correo
correos = ['mailto:' + correo for correo in correos]
return correos
# Ejemplos de texto
texto_a = "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b = "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a = extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b = extraer_correos(texto_b)
import pandas as pd
# Crear un data frame para almacenar los contactos
contactos_data = pd.DataFrame(columns=['Correo', 'Texto original'])
# Asignar los correos del Texto A al texto original A
contactos_data = contactos_data.append(pd.DataFrame({'Correo': correos_a, 'Texto original': texto_a}), ignore_index=True)
# Asignar el correo del Texto B al texto original B
contactos_data = contactos_data.append(pd.DataFrame({'Correo': [correos_b[0]], 'Texto original': [texto_b]}), ignore_index=True)
# Imprimir los contactos en un formato tabular
contactos_data
# Crear una lista de diccionarios para almacenar los datos de cada contacto
contactos_data = []
# Asignar los correos del Texto A al texto original A
for correo in correos_a:
contactos_data.append({'Correo': correo, 'texto original': texto_a})
# Asignar el correo del Texto B al texto original B
contactos_data.append({'Correo': correos_b[0], 'texto original': texto_b})
# Imprimir los contactos en un formato tabular
for contacto in contactos_data:
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
quit
library(tidyverse)
library(stringr)
library(stringr)
extraer_correos <- function(texto) {
# Expresión regular para buscar direcciones de correo electrónico
patron <- "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
# Buscar todas las coincidencias en el texto
correos <- str_extract_all(texto, patron)[[1]]
# Agregar el prefijo "mailto:" a cada dirección de correo
correos <- paste0("mailto:", correos)
return(correos)
}
# Ejemplos de texto
texto_a <- "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b <- "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a <- extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b <- extraer_correos(texto_b)
texto_a
correos_a
library(tidyverse)
# Crear un data frame para almacenar los contactos
contactos_data <- tibble(Correo = character(), `Texto original` = character())
# Asignar los correos del Texto A al texto original A
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_a, `Texto original` = texto_a))
# Asignar el correo del Texto B al texto original B
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_b[1], `Texto original` = texto_b))
# Imprimir los contactos en un formato tabular
contactos_data
library(tidyverse)
# Crear un data frame para almacenar los contactos
contactos_data <- tibble(Correo = character(), "Texto original" = character())
# Asignar los correos del Texto A al texto original A
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_a, "Texto original" = texto_a))
# Asignar el correo del Texto B al texto original B
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_b[1], "Texto original" = texto_b))
# Imprimir los contactos en un formato tabular
contactos_data
library(stringr)
extraer_correos <- function(texto) {
# Expresión regular para buscar direcciones de correo electrónico
patron <- "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
# Buscar todas las coincidencias en el texto
correos <- str_extract_all(texto, patron)[[1]]
# Agregar el prefijo "mailto:" a cada dirección de correo
correos <- paste0("mailto:", correos)
return(correos)
}
# Ejemplos de texto
texto_a <- "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b <- "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a <- extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b <- extraer_correos(texto_b)
library(tidyverse)
# Crear un data frame para almacenar los contactos
contactos_data <- tibble(Correo = character(), "Texto original" = character())
# Asignar los correos del Texto A al texto original A
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_a, "Texto original" = texto_a))
# Asignar el correo del Texto B al texto original B
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_b[1], "Texto original" = texto_b))
# Imprimir los contactos en un formato tabular
contactos_data
edad <- 4
edad
edad <- 3.5
edad
edad <- integer(edad)
edad
install.packages("dagitty")
library(dagitty)
g <- dagitty('dag {
X [pos="0,1"]
Y [pos="1,1"]
Z [pos="2,1"]
W [pos="1,0"]
T [pos="2,2"]
X -> Y -> Z -> T
X -> W -> Y -> T
W -> Z
}')
plot(g)
plot(g)
plot(g)
# Crear el grafo DAG
arbol_problemas <- dagitty("dag {
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "pago de licencias de software propietario";
# Crear el grafo DAG
arbol_problemas <- dagitty(
'dag {
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "pago de licencias de software propietario";
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"pago de licencias de software propietario" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
"limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia" -> "acceso acotado a herramientas de procesamiento de datos para la comunidad académica";
"acceso acotado a herramientas de procesamiento de datos para la comunidad académica" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
}'
)
# Visualizar el grafo DAG
plot(arbol_problemas)
# Crear el grafo DAG
arbol_problemas <- dagitty(
'dag {
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "pago de licencias de software propietario";
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"pago de licencias de software propietario" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
"limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia" -> "acceso acotado a herramientas de procesamiento de datos para la comunidad académica";
"acceso acotado a herramientas de procesamiento de datos para la comunidad académica" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
}'
)
# Visualizar el grafo DAG
plot(arbol_problemas)
# Crear el grafo DAG
arbol_problemas2 <- dagitty('dag {
"baja oferta" -> "licencias";
"baja oferta" -> "software libre";
"licencias" -> "software libre";
"software libre" -> "limitado conocimiento";
"limitado conocimiento" -> "acceso acotado";
"acceso acotado" -> "baja formación";
"Personal y estudiantado" -> "baja oferta";
"Personal y estudiantado" -> "baja formación";
"Personal y estudiantado" -> "limitado conocimiento";
}')
# Visualizar el grafo DAG
plot(arbol_problemas2)
plot(obj)
obj <- dagitty('dag {
W -> X -> Y -> Z
}')
plot(obj)
obj <- dagitty('dag {
W -> X
Y -> X
Z -> X
}')
plot(obj)
obj <- dagitty('dag {
W -> Objetivo general
Y -> Objetivo general
Z -> Objetivo general
}')
plot(obj)
obj <- dagitty('dag {
W -> "Objetivo general"
Y -> "Objetivo general"
Z -> "Objetivo general"
}')
plot(obj)
obj <- dagitty('dag {
"Objetivo específico 1" -> "Objetivo general"
"Objetivo específico 2" -> "Objetivo general"
"Objetivo específico 3" -> "Objetivo general"
}')
plot(obj)
install.packages("tidyverse")
install.packages("httr")
install.packages("jsonlite")
install.packages("rspotify")
paquetes <- c("tidyverse", "httr", "jsonlite", "rspotify")
install.packages(paquetes)
paquetes <- c("tidyverse", "httr", "jsonlite", "Rspotify")
install.packages(paquetes)
library(Rspotify)
# Establecer la clave de API y el secreto de la API
client_id <- "TU_CLIENT_ID"
client_secret <- "TU_CLIENT_SECRET"
# O bien, la importamos desde otro archivo privado
source("./scripts/config.R")
library(Rspotify)
# Establecer la clave de API y el secreto de la API
client_id <- "TU_CLIENT_ID"
client_secret <- "TU_CLIENT_SECRET"
# O bien, la importamos desde otro archivo privado
source("./scripts/config.R")
rep(c(1, 2, 3), times = 3)
library(tidyverse)
df <- readr::read_delim("data/RAW_DATA.csv",
delim = ';', col_names = TRUE)
Datos
Datos <- data.frame(c("a","b"),c(1,2))
Datos
Datos <- data.frame(("a","b"),(1,2))
Datos <- data.frame(c("a","b"),(1,2))
V1 = c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 = c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 = c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 <- c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 <- c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 <- c("Juan", "Claudia", "Marta", 1)
V1[3:4]
tidyverse_packages(include_self = TRUE)
library(tidyverse)
tidyverse_packages()
install.packages("learnr")
install.packages(swirl)
install.packages("swirl")
library(swirl)
swirl()
install_course("Exploratory Data Analysis")
install_course("Statistical Inference")
swirl()
swirl()
View(galton)
swirl()
plot.new()
?plot.new()
??figure margins too large
??figure_margins_too_large
setwd("C:/OD/OneDrive - alumnos.frm.utn.edu.ar/0 1 trabajo y proyectos/2023/educacionIT/curso-analisis-datos-r/Clase 4-ADR-04-09-2023")
# Crear un data frame de ejemplo
df <- data.frame(
x = c(1, 2, 3),
y = c(4, 5, 6)
)
View(df)
# Asignar nombres a las filas
rownames(df) <- c("fila1", "fila2", "fila3")
# Mostrar el data frame con los nombres de filas
df
View(df)
?rownames
# Asignar nombres a las columnas
colnames(df) <- c("col_1","col_2")
# Mostrar el data frame con los nombres de filas
df
# Asignar nombres a las columnas
colnames(df) <- c("a","b", prefix = "papa")
# Asignar nombres a las columnas
colnames(df, prefix = "papa") <- c("a", "b")
# Asignar nombres a las columnas
colnames(df) <- c("a", "b")
# Mostrar el data frame con los nombres de filas
df
# Asignar nombres a las columnas
colnames(df) <- c("col_1", "col_2")
# Mostrar el data frame con los nombres de filas
df
colnames(df[[2]]) <- c("b")
# Mostrar el data frame con los nombres de filas
df
colnames(df[2]) <- "b"
# Mostrar el data frame con los nombres de filas
df
colnames(df[[2]]) <- "b"
# Asignar nombres a las columnas
colnames(df) <- c("col_1", "col_2")
colnames(df) <- colnames(df, prefix = "Col.")
df
# Crear un data frame de ejemplo
df <- data.frame(
x = c(1:4),
y = c(5:8)
)
# Asignar nombres a las filas
rownames(df) <- c("fila1", "fila2", "fila3")
# Asignar nombres a las filas
rownames(df)
df
rownames(df) <- rownames(df, do.NULL = FALSE, prefix = "Obs.")
# Mostrar el data frame con los nombres de filas
df
# Asignar nombres a las filas
rownames(df) <- c("Obs. 1", "Obs. 2", "Obs. 3", "Obs. 4")
df
# Asignar nombres a las filas
rownames(df) <- c("Obs. a", "Obs. b", "Obs. c", "Obs. d")
df
m0 <- matrix(NA, 4, 0)
m0
m2 <- cbind(1, 1:4)
m2
rownames(m2) <- rownames(m2, do.NULL = FALSE, prefix = "Obs.")
m2
# opción 2
rownames(df) <- rownames(df, do.NULL = FALSE, prefix = "Obs.")
# Mostrar el data frame con los nombres de filas
df
# Asignar nombres a las filas
# opción 1
rownames(df) <- c("Obs. a", "Obs. b", "Obs. c", "Obs. d")
# Mostrar el data frame con los nombres de filas
df
# opción 2
rownames(df) <- rownames(df, do.NULL = FALSE, prefix = "Obs.")
# Mostrar el data frame con los nombres de filas
df
# opción 2
rownames(df) <- rownames(df, do.NULL = FALSE, prefix = "Obs.")
df
# Asignar nombres a las filas
rownames(df) <- c("Obs. a", "Obs. b", "Obs. c", "Obs. d")
# Asignar nombres a las columnas
colnames(df) <- c("col_1", "col_2")
# Mostrar el data frame con los nombres de filas
df
# Asignar nombres a las filas
rownames(df) <- c("Obs_a", "Obs_b", "Obs_c", "Obs_d")
# Mostrar el data frame con los nombres de filas
df
# Extra: renombrar columna con dplyr del Tidyverse
library(dplyr) # Importamos la librería
df_tbl <- as_tibble(df) # Creamos un objeto Tibble del data frame
rename(df_tbl, Columna_1 = col_1) # Renombramos la columna
# Mostrar el data frame Tibble renombrado
df_tbl
df_tbl <- rename(df_tbl, Columna_1 = col_1) # Renombramos la columna
# Mostrar el data frame Tibble renombrado
df_tbl
# Otra forma de renombrar una columna específica
df[[col_2]]
# Otra forma de renombrar una columna específica
df[["col_2"]]
# Otra forma de renombrar una columna específica
colnames(df[["col_2"]]) <- "Columna 2"
# Otra forma de renombrar una columna específica
colnames(df$"col_2") <- "Columna 2"
# Otra forma de renombrar una columna específica
df$"col_2"
# Creamos nuestro conjunto de datos
Datos <- data.frame(
id=c(1:10),
Nombre=c("Pepe", "Clara", "Jose", "Edu", "Calu", "Claudia", "Aiko", "Ignacio", "Mona", "Pau" ),
Edad=c(20, 32, 18, 26, 38, 52, 19, 31, 29, 60 ),
Peso=c(68, 42, 70, 47, 76, NA, 71, 83, 69, 92)
)
# Seleccionar columnas por nombre
personas <- select(Datos,Edad)
View(personas)
select(Datos,Nombre,Edad,id)
select(Datos,-Edad)
?select
filter(Datos,Edad>50) # Edades mayores a 50 años
filter(Datos, Nombre!="Pepe" & Nombre!="Mona")
rename(Datos, Nombre_2 = Nombre)
Datos
Datos <- rename(Datos, Nombre_2 = Nombre_b) # Guarda los cambios
Datos <- rename(Datos, Nombre = Nombre_b) # Guarda los cambios
Datos <- rename(Datos, Nombre_b = Nombre) # Guarda los cambios
Datos
arrange(Datos,Edad)
arrange(Datos,-Edad) # descendente
mutate(Datos,Peso_Edad=Peso+Edad)
mutate(Datos,Promedio_Peso=Peso*2)
Datos
mutate(Datos,Edad_Promedio=mean(Edad))
Datos <- mutate(Datos,Grasa=Peso/Edad)
Datos
Datos <- mutate(Datos,Peso_sobre_edad=Peso/Edad)
Datos
mutate(Datos,
Edad_50=ifelse(Edad>50,1,0),
Peso_alto=ifelse(Peso>60,"Alto","Bajo")
)
Datos <- mutate(Datos,
Edad_50=ifelse(Edad>50,1,0), # Si mayor, 1; si no, 0.
Peso_alto=ifelse(Peso>60,"Alto","Bajo")
)
Datos
# con case when
mutate(Datos,Edad_nueva=case_when(
Edad<=22~"Adolescente",
Edad>22 & Edad<60~"Adulto",
Edad>=60~"Mayor"
))
# con case when
mutate(Datos,Edad_nueva=case_when(
Edad<=22~"Adolescente",
Edad>22 & Edad<60~"Adulto",
Edad>=60~"Mayor"
))
?group_by
flores <- iris
flores_1 <- group_by(flores,Species)
flores_1
summarise(flores, PromedioSepalo = mean(Sepal.Length))
summarise(flores_1, PromedioSepalo = mean(Sepal.Length))
summarise(group_by(Datos,Edad_nueva),Suma_edad=sum(Edad))
# con case when
Datos <- mutate(Datos,
Edad_nueva =
case_when(
Edad <= 22 ~ "Adolescente",
Edad > 22 & Edad < 60 ~ "Adulto",
Edad >= 60 ~ "Mayor")
)
Datos
summarise(group_by(Datos,Edad_nueva),Suma_edad=sum(Edad))
?cbind
Datos=data.frame(
id=c(1:10),
Nombre=c("Brune", "Clara", "David", "Leo", "Pedro", "Claudia", "Alex", "Ignacio", "Jose", "Lucas" ),
Edad=c(20, 32, 18, 26, 38, 52, 19, 31, 29, 60 ),
Peso=c(68, 42, 70, 47, 76, NA, 71, 83, 69, 92))
