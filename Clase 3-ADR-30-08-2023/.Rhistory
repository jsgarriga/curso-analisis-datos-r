iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length / 2, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length / length(Petal.Length), colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 5, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width / 3, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width / 6, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width / 3, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 4) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 5) +
geom_point(show.legend = F, size = 1, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 5) +
geom_point(show.legend = F, size = 1.5, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length, colour = smooth), size = Sepal.Width) +
geom_point(show.legend = F, size = 5) +
geom_point(show.legend = F, size = 1.5, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length, colour = "smooth"), size = Sepal.Width) +
geom_point(show.legend = F, size = 5) +
geom_point(show.legend = F, size = 1.5, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
iris |>
ggplot(aes(Petal.Width ^ 2, Petal.Length, colour = Species), size = Sepal.Width) +
geom_point(show.legend = F, size = 5) +
geom_point(show.legend = F, size = 1.5, colour = "#ffffff") +
coord_polar() +
theme_void() +
scale_color_discrete()
help(base)
library(help = "base")
# verificar si tenemos las siguientes librerías instaladas y actualizadas
install.packages("tidyverse", "tidymodels")
install.packages("tidytext")
install.packages("IRdisplay")
q()
library(httr)
library(stringr)
api_key <- readline("Introduce tu API key de OpenAI: ")
ask_chatgpt <- function(prompt) {
response <- POST(
url = "https://api.openai.com/v1/chat/completions",
add_headers(Authorization = paste("Bearer", api_key)),
content_type_json(),
encode = "json",
body = list(
model = "gpt-3.5-turbo",
messages = list(list(
role = "user",
content = prompt
))
)
)
str_trim(content(response)$choices[[1]]$message$content)
}
pregunta <- ask_chatgpt(readline("Escribe tu pregunta:\n"))
cat(answer)
cat(pregunta)
respuesta <- cat(pregunta)
respuesta
pregunta <- ask_chatgpt(readline("Escribe tu pregunta:\n"))
pregunta <- readline(prompt = "Escribe tu pregunta:\n")
num_results = 1, search_model = modelo)
pregunta <- ask_chatgpt(readline("Escribe tu pregunta:\n"))
#   pregunta <- readline(prompt = "Escribe tu pregunta:\n")
#   respuesta <- index$query(prompt = pregunta, max_tokens = 1024,
#                            num_results = 1, search_model = modelo)
#   display(str_wrap(respuesta$response, width = 100))
# }
respuesta <- cat(pregunta)
while (TRUE) {
pregunta <- ask_chatgpt(readline("Escribe tu pregunta:\n"))
cat(pregunta)
}
histograma <- ask_chatgpt("¿Con qué función creo un histograma en R?")
cat(histograma)
# Crear un vector de datos
datos <- c(5, 8, 13, 18, 22, 27, 30, 35, 40, 45, 50)
# Crear un histograma
hist(datos, main="Histograma de datos", xlab="Valores", col="lightblue", border="white")
fungal_green <- ask_chatgpt(
"Answer only with the color hex code for 'fungal zombie green'"
)
print(fungal_green)
hist(rnorm(100), col = fungal_green)
while (TRUE) {
pregunta <- ask_chatgpt(readline("Escribe tu pregunta:\n"))
cat(pregunta)
}
dput(pregunta, file = "./test.txt")
dput(pregunta, file = "./test.txt")
dput(pregunta, file = "./test.txt")
dput(pregunta, file = "./test.txt")
# Guardar el objeto "mi_objeto"
mi_objeto <- c(1, 2, 3, 4, 5)
dput(mi_objeto, file = "mi_objeto.txt")
# Enviar la salida a un archivo de texto
sink(file = "mi_objeto_y_contenido.txt")
mi_objeto
sink()
# Guardar el objeto "mi_objeto"
mi_objeto <- c(1, 2, 3, 4, 5)
dput(mi_objeto, file = "./mi_objeto.txt")
# Enviar la salida a un archivo de texto
sink(file = "./mi_objeto_y_contenido.txt")
mi_objeto
sink()
dad
sasas
reticulate::repl_python()
1+1
import re
import pandas as pd
def extraer_correos(texto):
# Expresión regular para buscar direcciones de correo electrónico
patron = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
# Buscar todas las coincidencias en el texto
correos = re.findall(patron, texto)
# Agregar el prefijo "mailto:" a cada dirección de correo
correos = ['mailto:' + correo for correo in correos]
return correos
# Ejemplos de texto
texto_a = "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b = "Envíame el trabajo a sofia@dir.com"
# Crear un DataFrame para almacenar los contactos
df = pd.DataFrame(columns=['Correo'])
View(extraer_correos)
correos_a = extraer_correos(texto_a)
df = df.append(pd.DataFrame({'Correo': correos_a}), ignore_index=True)
correos_b = extraer_correos(texto_b)
df = df.append(pd.DataFrame({'Correo': correos_b}), ignore_index=True)
df
df.head()
df['texto original'] = ""
df.loc[0, 'texto original'] = texto_a
df.loc[1, 'texto original'] = texto_b
df
import re
def extraer_correos(texto):
# Expresión regular para buscar direcciones de correo electrónico
patron = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
# Buscar todas las coincidencias en el texto
correos = re.findall(patron, texto)
# Agregar el prefijo "mailto:" a cada dirección de correo
correos = ['mailto:' + correo for correo in correos]
return correos
# Ejemplos de texto
texto_a = "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b = "Envíame el trabajo a sofia@dir.com"
# Crear una lista para almacenar los contactos
contactos = []
# Extraer y almacenar los correos del Texto A
correos_a = extraer_correos(texto_a)
contactos.extend(correos_a)
# Extraer y almacenar los correos del Texto B
correos_b = extraer_correos(texto_b)
contactos.extend(correos_b)
# Crear una lista de diccionarios para almacenar los datos de cada contacto
contactos_data = [{'Correo': correo, 'texto original': ''} for correo in contactos]
# Asignar los textos 'a' y 'b' a la clave "texto original" en cada diccionario
contactos_data[0]['texto original'] = texto_a
contactos_data[1]['texto original'] = texto_b
# Imprimir los contactos en un formato tabular
for contacto in contactos_data:
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
quit
# Imprimir los contactos en un formato tabular
for contacto in contactos_data:
reticulate::repl_python()
for contacto in contactos_data:
import re
import pandas as pd
def extraer_correos(texto):
# Expresión regular para buscar direcciones de correo electrónico
patron = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
# Buscar todas las coincidencias en el texto
correos = re.findall(patron, texto)
# Agregar el prefijo "mailto:" a cada dirección de correo
correos = ['mailto:' + correo for correo in correos]
return correos
# Ejemplos de texto
texto_a = "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b = "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a = extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b = extraer_correos(texto_b)
# Crear un data frame para almacenar los contactos
contactos_data = pd.DataFrame(columns=['Correo', 'Texto original'])
# Asignar los correos del Texto A al texto original A
contactos_data = contactos_data.append(pd.DataFrame({'Correo': correos_a, 'Texto original': texto_a}), ignore_index=True)
# Asignar el correo del Texto B al texto original B
contactos_data = contactos_data.append(pd.DataFrame({'Correo': [correos_b[0]], 'Texto original': [texto_b]}), ignore_index=True)
# Imprimir los contactos en un formato tabular
contactos_data
import re
def extraer_correos(texto):
# Expresión regular para buscar direcciones de correo electrónico
patron = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
# Buscar todas las coincidencias en el texto
correos = re.findall(patron, texto)
# Agregar el prefijo "mailto:" a cada dirección de correo
correos = ['mailto:' + correo for correo in correos]
return correos
# Ejemplos de texto
texto_a = "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b = "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a = extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b = extraer_correos(texto_b)
import pandas as pd
# Crear un data frame para almacenar los contactos
contactos_data = pd.DataFrame(columns=['Correo', 'Texto original'])
# Asignar los correos del Texto A al texto original A
contactos_data = contactos_data.append(pd.DataFrame({'Correo': correos_a, 'Texto original': texto_a}), ignore_index=True)
# Asignar el correo del Texto B al texto original B
contactos_data = contactos_data.append(pd.DataFrame({'Correo': [correos_b[0]], 'Texto original': [texto_b]}), ignore_index=True)
# Imprimir los contactos en un formato tabular
contactos_data
# Crear una lista de diccionarios para almacenar los datos de cada contacto
contactos_data = []
# Asignar los correos del Texto A al texto original A
for correo in correos_a:
contactos_data.append({'Correo': correo, 'texto original': texto_a})
# Asignar el correo del Texto B al texto original B
contactos_data.append({'Correo': correos_b[0], 'texto original': texto_b})
# Imprimir los contactos en un formato tabular
for contacto in contactos_data:
print(f"Correo: {contacto['Correo']}\tTexto original: {contacto['texto original']}")
quit
library(tidyverse)
library(stringr)
library(stringr)
extraer_correos <- function(texto) {
# Expresión regular para buscar direcciones de correo electrónico
patron <- "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
# Buscar todas las coincidencias en el texto
correos <- str_extract_all(texto, patron)[[1]]
# Agregar el prefijo "mailto:" a cada dirección de correo
correos <- paste0("mailto:", correos)
return(correos)
}
# Ejemplos de texto
texto_a <- "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b <- "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a <- extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b <- extraer_correos(texto_b)
texto_a
correos_a
library(tidyverse)
# Crear un data frame para almacenar los contactos
contactos_data <- tibble(Correo = character(), `Texto original` = character())
# Asignar los correos del Texto A al texto original A
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_a, `Texto original` = texto_a))
# Asignar el correo del Texto B al texto original B
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_b[1], `Texto original` = texto_b))
# Imprimir los contactos en un formato tabular
contactos_data
library(tidyverse)
# Crear un data frame para almacenar los contactos
contactos_data <- tibble(Correo = character(), "Texto original" = character())
# Asignar los correos del Texto A al texto original A
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_a, "Texto original" = texto_a))
# Asignar el correo del Texto B al texto original B
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_b[1], "Texto original" = texto_b))
# Imprimir los contactos en un formato tabular
contactos_data
library(stringr)
extraer_correos <- function(texto) {
# Expresión regular para buscar direcciones de correo electrónico
patron <- "\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b"
# Buscar todas las coincidencias en el texto
correos <- str_extract_all(texto, patron)[[1]]
# Agregar el prefijo "mailto:" a cada dirección de correo
correos <- paste0("mailto:", correos)
return(correos)
}
# Ejemplos de texto
texto_a <- "Gracias por seguirnos. Puedes escribirnos a pepe@dir.com o a juan@dir.com"
texto_b <- "Envíame el trabajo a sofia@dir.com"
# Extraer y almacenar los correos del Texto A
correos_a <- extraer_correos(texto_a)
# Extraer y almacenar los correos del Texto B
correos_b <- extraer_correos(texto_b)
library(tidyverse)
# Crear un data frame para almacenar los contactos
contactos_data <- tibble(Correo = character(), "Texto original" = character())
# Asignar los correos del Texto A al texto original A
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_a, "Texto original" = texto_a))
# Asignar el correo del Texto B al texto original B
contactos_data <- bind_rows(contactos_data, tibble(Correo = correos_b[1], "Texto original" = texto_b))
# Imprimir los contactos en un formato tabular
contactos_data
edad <- 4
edad
edad <- 3.5
edad
edad <- integer(edad)
edad
install.packages("dagitty")
library(dagitty)
g <- dagitty('dag {
X [pos="0,1"]
Y [pos="1,1"]
Z [pos="2,1"]
W [pos="1,0"]
T [pos="2,2"]
X -> Y -> Z -> T
X -> W -> Y -> T
W -> Z
}')
plot(g)
plot(g)
plot(g)
# Crear el grafo DAG
arbol_problemas <- dagitty("dag {
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "pago de licencias de software propietario";
# Crear el grafo DAG
arbol_problemas <- dagitty(
'dag {
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "pago de licencias de software propietario";
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"pago de licencias de software propietario" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
"limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia" -> "acceso acotado a herramientas de procesamiento de datos para la comunidad académica";
"acceso acotado a herramientas de procesamiento de datos para la comunidad académica" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
}'
)
# Visualizar el grafo DAG
plot(arbol_problemas)
# Crear el grafo DAG
arbol_problemas <- dagitty(
'dag {
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "pago de licencias de software propietario";
"baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"pago de licencias de software propietario" -> "bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos";
"bajo conocimiento en alternativas de software libre y gratuito para el procesamiento de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
"limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia" -> "acceso acotado a herramientas de procesamiento de datos para la comunidad académica";
"acceso acotado a herramientas de procesamiento de datos para la comunidad académica" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja oferta de materias y contenido sobre procesamiento de datos en los planes de estudio y/o de electivas";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "baja formación en el plantel de docentes e investigadoris sobre herramientas alternativas libres";
"Personal y estudiantado de la FCPyS con limitado conocimiento en procesamiento y análisis de datos" -> "limitado conocimiento en manipulación de datos con software actualmente demandado por el mercado y la academia";
}'
)
# Visualizar el grafo DAG
plot(arbol_problemas)
# Crear el grafo DAG
arbol_problemas2 <- dagitty('dag {
"baja oferta" -> "licencias";
"baja oferta" -> "software libre";
"licencias" -> "software libre";
"software libre" -> "limitado conocimiento";
"limitado conocimiento" -> "acceso acotado";
"acceso acotado" -> "baja formación";
"Personal y estudiantado" -> "baja oferta";
"Personal y estudiantado" -> "baja formación";
"Personal y estudiantado" -> "limitado conocimiento";
}')
# Visualizar el grafo DAG
plot(arbol_problemas2)
plot(obj)
obj <- dagitty('dag {
W -> X -> Y -> Z
}')
plot(obj)
obj <- dagitty('dag {
W -> X
Y -> X
Z -> X
}')
plot(obj)
obj <- dagitty('dag {
W -> Objetivo general
Y -> Objetivo general
Z -> Objetivo general
}')
plot(obj)
obj <- dagitty('dag {
W -> "Objetivo general"
Y -> "Objetivo general"
Z -> "Objetivo general"
}')
plot(obj)
obj <- dagitty('dag {
"Objetivo específico 1" -> "Objetivo general"
"Objetivo específico 2" -> "Objetivo general"
"Objetivo específico 3" -> "Objetivo general"
}')
plot(obj)
install.packages("tidyverse")
install.packages("httr")
install.packages("jsonlite")
install.packages("rspotify")
paquetes <- c("tidyverse", "httr", "jsonlite", "rspotify")
install.packages(paquetes)
paquetes <- c("tidyverse", "httr", "jsonlite", "Rspotify")
install.packages(paquetes)
library(Rspotify)
# Establecer la clave de API y el secreto de la API
client_id <- "TU_CLIENT_ID"
client_secret <- "TU_CLIENT_SECRET"
# O bien, la importamos desde otro archivo privado
source("./scripts/config.R")
library(Rspotify)
# Establecer la clave de API y el secreto de la API
client_id <- "TU_CLIENT_ID"
client_secret <- "TU_CLIENT_SECRET"
# O bien, la importamos desde otro archivo privado
source("./scripts/config.R")
rep(c(1, 2, 3), times = 3)
library(tidyverse)
df <- readr::read_delim("data/RAW_DATA.csv",
delim = ';', col_names = TRUE)
Datos
Datos <- data.frame(c("a","b"),c(1,2))
Datos
Datos <- data.frame(("a","b"),(1,2))
Datos <- data.frame(c("a","b"),(1,2))
V1 = c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 = c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 = c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 <- c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 <- c(“Juan”, ”Claudia”, ”Marta”, 1)
V1 <- c("Juan", "Claudia", "Marta", 1)
V1[3:4]
tidyverse_packages(include_self = TRUE)
library(tidyverse)
tidyverse_packages()
setwd("C:/OD/OneDrive - alumnos.frm.utn.edu.ar/0 1 trabajo y proyectos/2023/educacionIT/curso-analisis-datos-r/Clase 3-ADR-30-08-2023")
# Ahora, cargamos los paquetes que vamos a utilizar
library(xlsx)
library(readxl)
# Abrimos el archivo excel
poblacion <- read_excel("Poblacion Mundial.xlsx")
poblacion_sub <- Poblacion_Mundial[1:100,] # seleccionamos las primeras 100 observaciones/filas/casos...
poblacion_sub <- Poblacion[1:100,] # seleccionamos las primeras 100 observaciones/filas/casos...
poblacion_sub <- poblacion[1:100,] # seleccionamos las primeras 100 observaciones/filas/casos...
# Escribimos un archivo excel
xlsx::write.xlsx(poblacion_sub # el objeto con los datos
, file = "datos_de_R_a_Excel.xlsx" # el nombre del archivo
, sheetName = "nuevo") # el nombre de la hoja
